<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Nacos集群配置及Nginx反向代理</title>
    <url>/2020/10/27/Nacos%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E5%8F%8ANginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<p>Nacos集群配置以及Nginx反向代理的一些配置</p>
<a id="more"></a>
<h2 id="安装Nacos"><a href="#安装Nacos" class="headerlink" title="安装Nacos"></a>安装Nacos</h2><p><strong>前提是需要一个虚拟机，本文基于CentOS 7</strong></p>
<ol>
<li><p>下载Nacos</p>
<p> <a href="https://github.com/alibaba/nacos/releases/tag/1.3.2">下载地址</a></p>
</li>
<li><p>配置Nacos</p>
<ul>
<li><p>创建mynacos文件夹；将tar包解压到mynacos文件夹中</p>
</li>
<li><p>配置cluster.conf</p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> cluster.conf.example cluster.conf</span><br><span class="line">vim cluster.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加以下内容(根据自己的<strong>主机ip</strong>来填</p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">192.168</span>.<span class="number">81.129</span>:<span class="number">3333</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">81.129</span>:<span class="number">4444</span></span><br><span class="line"><span class="number">192.168</span>.<span class="number">81.129</span>:<span class="number">5555</span></span><br></pre></td></tr></table></figure>
<!-- more --></li>
<li><p>修改数据库文件,<strong>vim application.properties</strong></p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">spring.datasource.platform=mysql</span><br><span class="line">db.num=<span class="number">1</span></span><br><span class="line">db.url.<span class="number">0</span>=jdbc:mysql://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">3306</span>/nacos_config?characterEncoding=utf8&amp;connectTimeout=<span class="number">1000</span>&amp;socketTimeout=<span class="number">3000</span>&amp;autoReconnect=true</span><br><span class="line">db.user=root</span><br><span class="line">db.password=<span class="number">6</span>yhn^YHN</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭防火墙或者开放端口（为了省事，我关闭了和防火墙）</p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure>


</li>
</ul>
</li>
</ol>
<ol start="3">
<li><p>启动Nacos</p>
<p> <strong>TIPS：因为是一台机器，所以以多个实例来设置集群，以端口区分，需要启动三个nacos；如果是多台机器那就正常一个机器起一个nacos即可</strong></p>
<ul>
<li><p>复制<strong>startup.sh</strong></p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cp</span> startup.sh.bak startup<span class="literal">-3333</span>.sh</span><br><span class="line"><span class="built_in">cp</span> startup.sh.bak startup<span class="literal">-4444</span>.sh</span><br><span class="line"><span class="built_in">cp</span> startup.sh.bak startup<span class="literal">-5555</span>.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<strong>vim startup-3333.sh</strong>（一个示例，4444和5555 都按照此修改）,增加-Dserver.port=3333启动时指定端口号</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$JAVA</span> <span class="variable">$</span>&#123;JAVA_OPT&#125;&quot;</span> &gt; <span class="variable">$</span>&#123;BASE_DIR&#125;/logs/start.out <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br><span class="line">nohup <span class="variable">$JAVA</span> <span class="literal">-Dserver</span>.port=<span class="number">3333</span> <span class="variable">$</span>&#123;JAVA_OPT&#125; nacos.nacos &gt;&gt; <span class="variable">$</span>&#123;BASE_DIR&#125;/logs/start.out <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;nacos is starting，you can check the <span class="variable">$</span>&#123;BASE_DIR&#125;/logs/start.out&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动nacos</p>
  <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">./startup<span class="literal">-3333</span>.sh</span><br><span class="line">./startup<span class="literal">-4444</span>.sh</span><br><span class="line">./startup<span class="literal">-5555</span>.sh</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ol>
<h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><p>贴个安装nginx教程，并且配置stream负载均衡 <a href="http://xiaohost.com/2754.html">转向网址</a></p>
<ol>
<li><p>配置Nginx</p>
<p> 由于我是yum安装的Nginx 配置文件 <strong>vim /etc/nginx/nginx.confg</strong></p>
<ul>
<li><p>设置upstream cluster</p>
</li>
<li><p>设置location根路径。<strong>proxy_pass <a href="http://cluster/">http://cluster</a>;</strong></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#gzip  on;</span><br><span class="line">upstream cluster&#123;</span><br><span class="line">    server 192.168.81.129:3333;</span><br><span class="line">    server 192.168.81.129:4444;</span><br><span class="line">    server 192.168.81.129:5555;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen       1111;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line"></span><br><span class="line">    #access_log  logs&#x2F;host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;cluster;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>启动Nginx</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start nginx.service</span><br></pre></td></tr></table></figure></li>
<li><p>登录查看<a href="http://192.168.81.129:1111/nacos/#/login">http://192.168.81.129:1111/nacos/#/login</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Nacos集群配置</category>
      </categories>
      <tags>
        <tag>Nacos集群配置</tag>
        <tag>Nginx反向代理</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal内存泄露</title>
    <url>/2021/04/25/ThreadLocal%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/</url>
    <content><![CDATA[<h2 id="ThreadLocal-简介"><a href="#ThreadLocal-简介" class="headerlink" title="ThreadLocal 简介"></a>ThreadLocal 简介</h2><p><code>ThreadLocal</code>提供了线程的局部变量，每个线程都可以通过<code>set()</code>和<code>get()</code>来对这个局部变量进行操作，但不会和其他线程的局部变量进行冲突，从而避免了线程安全问题。</p>
<p>简而言之：<code>ThreadLocal</code>保证了各个线程的数据互不干扰。</p>
<a id="more"></a>

<h2 id="ThreadLocal-原理"><a href="#ThreadLocal-原理" class="headerlink" title="ThreadLocal 原理"></a>ThreadLocal 原理</h2><p>从 <code>Thread</code>类源代码入手。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"> ......</span><br><span class="line"><span class="comment">//与此线程有关的ThreadLocal值。由ThreadLocal类维护</span></span><br><span class="line">ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护</span></span><br><span class="line">ThreadLocal.ThreadLocalMap inheritableThreadLocals = <span class="keyword">null</span>;</span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面<code>Thread</code>类 源代码可以看出<code>Thread</code> 类中有一个 <code>threadLocals</code> 和 一个 <code>inheritableThreadLocals</code> 变量，它们都是 <code>ThreadLocalMap</code> 类型的变量,我们可以把 <code>ThreadLocalMap</code> 理解为<code>ThreadLocal</code> 类实现的定制化的 <code>HashMap</code>。默认情况下这两个变量都是 null，只有当前线程调用 <code>ThreadLocal</code> 类的 <code>set</code>或<code>get</code>方法时才创建它们，实际上调用这两个方法的时候，我们调用的是<code>ThreadLocalMap</code>类对应的 <code>get()</code>、<code>set()</code>方法。</p>
<p><code>ThreadLocal</code>类的<code>set()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">        map.set(<span class="keyword">this</span>, value);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, value);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终的变量是放在了当前线程的 <code>ThreadLocalMap</code> 中，并不是存在 <code>ThreadLocal</code> 上，<code>ThreadLocal</code> 可以理解为只是<code>ThreadLocalMap</code>的封装，传递了变量值。 <code>ThrealLocal</code> 类中可以通过<code>Thread.currentThread()</code>获取到当前线程对象后，直接通过<code>getMap(Thread t)</code>可以访问到该线程的<code>ThreadLocalMap</code>对象。</p>
<p><strong>每个<code>Thread</code>中都有一个<code>ThreadLocalMap</code>，而<code>ThreadLocalMap</code>可以存储以<code>ThreadLocal</code>为 key ，Object 对象为 value 的键值对；采用类似hashmap机制</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class="line"> ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ThreadLocal-内存泄露原因"><a href="#ThreadLocal-内存泄露原因" class="headerlink" title="ThreadLocal 内存泄露原因"></a>ThreadLocal 内存泄露原因</h2><p>ThreadLocal可能导致内存泄漏，为什么？</p>
<p>先看看Entry的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">    Object value;</span><br><span class="line"></span><br><span class="line">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">        <span class="keyword">super</span>(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong><code>ThreadLocalMap</code> 中使用的 key 为 <code>ThreadLocal</code> 的弱引用,而 value 是强引用。所以，如果 <code>ThreadLocal</code> 没有被外部强引用的情况下，在垃圾回收的时候，key 会被清理掉，而 value 不会被清理掉。这样一来，<code>ThreadLocalMap</code> 中就会出现 key 为 null 的 <code>Entry</code>。假如我们不做任何措施的话，value 永远无法被 GC 回收，这个时候就可能会产生内存泄露</strong></p>
<h2 id="如何避免-ThreadLocal-内存泄露"><a href="#如何避免-ThreadLocal-内存泄露" class="headerlink" title="如何避免 ThreadLocal 内存泄露"></a>如何避免 ThreadLocal 内存泄露</h2><p>如果使用ThreadLocal的set方法之后，记得调用<code>remove()</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; localName = <span class="keyword">new</span> ThreadLocal();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    localName.set(<span class="string">&quot;xxx&quot;</span>);</span><br><span class="line">    <span class="comment">// 业务逻辑</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//调用remove()</span></span><br><span class="line">    localName.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 自动挂载SD卡</title>
    <url>/2020/10/27/Ubuntu%20%E8%87%AA%E5%8A%A8%E6%8C%82%E8%BD%BDSD%E5%8D%A1/</url>
    <content><![CDATA[<p>最近开发过程中遇见了一个问题，Ubuntu 16.04 自动挂载SD卡报错，<code>mounted filesystem with ordered data mode. Opts: (null)</code>以此记录一下</p>
<a id="more"></a>

<ol>
<li><p>查看分区</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line">root@ubuntu16:~<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">中间省略无关东西;主要是为了挂载 /dev/mmcblk0p1</span><br><span class="line"></span><br><span class="line">Disk /dev/mmcblk0: <span class="number">29.7</span> GiB, <span class="number">31914983424</span> bytes, <span class="number">62333952</span> sectors</span><br><span class="line">Units: sectors of <span class="number">1</span> * <span class="number">512</span> = <span class="number">512</span> bytes</span><br><span class="line">Sector size (logical/physical): <span class="number">512</span> bytes / <span class="number">512</span> bytes</span><br><span class="line">I/O size (minimum/optimal): <span class="number">512</span> bytes / <span class="number">512</span> bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: <span class="number">0</span>x00000000</span><br><span class="line"></span><br><span class="line">Device         Boot <span class="built_in">Start</span>      <span class="keyword">End</span>  Sectors  Size Id <span class="built_in">Type</span></span><br><span class="line">/dev/mmcblk0p1       <span class="number">2048</span> <span class="number">62333951</span> <span class="number">62331904</span> <span class="number">29.7</span>G <span class="number">83</span> Linux</span><br><span class="line">root@ubuntu16:~<span class="comment"># </span></span><br></pre></td></tr></table></figure>
<p> sd卡文件格式的原先是fat32位，由于内核是裁剪版，没有fsck.vfat 修复（如果有，可以直接修复），直接将其格式化成ext4 <code>记得备份里面内容</code></p>
</li>
<li><p>手动挂载SD卡（ 成功 ）</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mount</span> /dev/mmcblk0p1 /mnt/sd/</span><br></pre></td></tr></table></figure>
<p> <strong>df -h</strong>查看挂载成功</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@ubuntu16:~<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">ubi0:rootfs     <span class="number">437</span>M  <span class="number">384</span>M   <span class="number">54</span>M  <span class="number">88</span>% /</span><br><span class="line">devtmpfs        <span class="number">121</span>M     <span class="number">0</span>  <span class="number">121</span>M   <span class="number">0</span>% /dev</span><br><span class="line">tmpfs           <span class="number">122</span>M     <span class="number">0</span>  <span class="number">122</span>M   <span class="number">0</span>% /dev/shm</span><br><span class="line">tmpfs           <span class="number">122</span>M  <span class="number">1.7</span>M  <span class="number">120</span>M   <span class="number">2</span>% /run</span><br><span class="line">tmpfs           <span class="number">5.0</span>M  <span class="number">4.0</span>K  <span class="number">5.0</span>M   <span class="number">1</span>% /run/lock</span><br><span class="line">tmpfs           <span class="number">122</span>M     <span class="number">0</span>  <span class="number">122</span>M   <span class="number">0</span>% /sys/fs/cgroup</span><br><span class="line">/dev/mmcblk0p1   <span class="number">30</span>G  <span class="number">153</span>M   <span class="number">28</span>G   <span class="number">1</span>% /mnt/sd</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 手动挂载SD卡可以成功，但是自动挂载却失败了</p>
</li>
</ol>
<h3 id="以下自动挂载过程"><a href="#以下自动挂载过程" class="headerlink" title="以下自动挂载过程"></a>以下自动挂载过程</h3><ol>
<li><p>修改<code>/etc/fstab</code>文件（ 失败 ）</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@ubuntu16:~<span class="comment"># vim /etc/fstab </span></span><br><span class="line"><span class="comment"># &lt;file system&gt;   &lt;dir&gt;         &lt;type&gt;    &lt;options&gt;                          &lt;dump&gt; &lt;pass&gt;</span></span><br><span class="line">/dev/mmcblk0p2    /             ext4      defaults,noatime,errors=remount<span class="literal">-ro</span>   <span class="number">0</span>      <span class="number">1</span></span><br><span class="line">/dev/mmcblk0p1    /mnt/sd          ext4      defaults                             <span class="number">0</span>      <span class="number">0</span></span><br><span class="line">~                                                                                            </span><br></pre></td></tr></table></figure>

<p> 查看dmesg日志信息，报错如下（裁剪版，连syslog也没有）</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="number">24987.953468</span>] EXT4<span class="literal">-fs</span> (mmcblk0p1): mounted filesystem with ordered <span class="keyword">data</span> mode. Opts: (null)</span><br><span class="line">[<span class="number">25051.864722</span>] EXT4<span class="literal">-fs</span> (mmcblk0p1): mounted filesystem with ordered <span class="keyword">data</span> mode. Opts: (null)</span><br><span class="line">[<span class="number">25327.264935</span>] EXT4<span class="literal">-fs</span> (mmcblk0p1): mounted filesystem with ordered <span class="keyword">data</span> mode. Opts: (null)</span><br><span class="line">[<span class="number">25392.234106</span>] EXT4<span class="literal">-fs</span> (mmcblk0p1): mounted filesystem with ordered <span class="keyword">data</span> mode. Opts: (null)</span><br><span class="line">[<span class="number">171378.249554</span>] EXT4<span class="literal">-fs</span> (mmcblk0p1): mounted filesystem with ordered <span class="keyword">data</span> mode. Opts: (null)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>/etc/rc.local</code>文件（ 失败 ）<br> 加入以下内容</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mount</span> /dev/mmcblk0p1 /mnt/sd</span><br></pre></td></tr></table></figure>
<p> 重启之后依然报上述错误</p>
</li>
<li><p>手动指定挂在文件类型（ 成功 ）</p>
 <figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mount</span> <span class="literal">-t</span> ext4 /dev/mmcblk0p1 /mnt/sd</span><br></pre></td></tr></table></figure>
<p> 重启机器之后，<code>df -h</code>查看挂载成功</p>
</li>
</ol>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol>
<li>文件系统有问题，可以使用<code>fsck.XX</code>参数去修复</li>
<li>期间也尝试了在<code>/etc/fstab</code>使用UUID 来指定，依然报错</li>
<li>手动指定挂在文件类型<code>mount -t ext4 /dev/mmcblk0p1 /mnt/sd</code></li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu挂载SD卡</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04 使用root ssh登录</title>
    <url>/2020/10/28/Ubuntu-16-04-%E4%BD%BF%E7%94%A8root-ssh%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<p><strong>如果你只是想登陆别的机器的SSH只需要安装openssh-client（ubuntu有默认安装，如果没有则sudoapt-get install openssh-client），如果要使本机开放SSH服务就需要安装openssh-server。</strong></p>
<a id="more"></a>
<ol>
<li><p>安装openssh-server</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure></li>
<li><p>修改 root 密码</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure></li>
<li><p>修改配置文件</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</span><br></pre></td></tr></table></figure>

<p> 找到下面相关配置：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Authentication:</span><br><span class="line">LoginGraceTime 120</span><br><span class="line">PermitRootLogin prohibit-password</span><br><span class="line">StrictModes yes</span><br></pre></td></tr></table></figure>
<p> 更改为：</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Authentication:</span><br><span class="line">LoginGraceTime 120</span><br><span class="line">#PermitRootLogin prohibit-password</span><br><span class="line">PermitRootLogin yes</span><br><span class="line">StrictModes yes</span><br></pre></td></tr></table></figure></li>
<li><p>重启ssh</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service ssh restart</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 更换apt源、pip3源</title>
    <url>/2020/10/28/Ubuntu-%E6%9B%B4%E6%8D%A2apt%E6%BA%90%E3%80%81pip3%E6%BA%90/</url>
    <content><![CDATA[<p>Ubuntu终端下载速度过慢问题</p>
<a id="more"></a>
<h2 id="ubuntu-更换apt源"><a href="#ubuntu-更换apt源" class="headerlink" title="ubuntu 更换apt源"></a>ubuntu 更换apt源</h2><ol>
<li><p>切换root </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo su -</span><br></pre></td></tr></table></figure></li>
<li><p>备份源文件</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd &#x2F;etc&#x2F;apt</span><br><span class="line">mv  sources.list sources.list_bak</span><br></pre></td></tr></table></figure></li>
<li><p>新建sources.list </p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim sources.list </span><br></pre></td></tr></table></figure>
<p>拷贝以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># deb cdrom:[Ubuntu 16.04 LTS _Xenial Xerus_ - Release amd64 (20160420.1)]&#x2F; xenial main restricted</span><br><span class="line">deb-src http:&#x2F;&#x2F;archive.ubuntu.com&#x2F;ubuntu xenial main restricted #Added by software-properties</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main restricted</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main restricted</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates multiverse</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-backports main restricted universe multiverse #Added by software-properties</span><br><span class="line">deb http:&#x2F;&#x2F;archive.canonical.com&#x2F;ubuntu xenial partner</span><br><span class="line">deb-src http:&#x2F;&#x2F;archive.canonical.com&#x2F;ubuntu xenial partner</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main restricted</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main restricted multiverse universe #Added by software-properties</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security multiverse</span><br></pre></td></tr></table></figure>


</li>
</ol>
<ol start="4">
<li>更新配置 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="ubuntu-更换pip3源"><a href="#ubuntu-更换pip3源" class="headerlink" title="ubuntu 更换pip3源"></a>ubuntu 更换pip3源</h2><ol>
<li><p>切换root</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo su -</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装pip3</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt install python3-pip</span><br></pre></td></tr></table></figure></li>
<li><p>创建文件</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;.pip</span><br><span class="line"></span><br><span class="line">vim ~&#x2F;.pip&#x2F;pip.conf</span><br></pre></td></tr></table></figure></li>
<li><p>拷贝以下内容</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;pypi&#x2F;simple</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>fasterxml中string字符串转对象json格式单引号错误</title>
    <url>/2020/10/28/fasterxml%E4%B8%ADstring%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E5%AF%B9%E8%B1%A1json%E6%A0%BC%E5%BC%8F%E5%8D%95%E5%BC%95%E5%8F%B7%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>在处理fasterxml中string字符串转对象json格式，标准的json都是双引号 （” “）;由于数据是单引号(‘ ‘)格式。导致了如下报错，特此记录</p>
<p><strong>com.fasterxml.jackson.core.JsonParseException:  Unexpected character (‘s’ (code 115)): was     expecting double-quote to start field name</strong></p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">com.fasterxml.jackson.databind.ObjectMapper </span><br><span class="line">mapper &#x3D; new ObjectMapper();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;增加这行配置</span><br><span class="line">&#x2F;&#x2F;允许使用单引号，默认是false </span><br><span class="line">mapper.configure(Feature.ALLOW_SINGLE_QUOTES, true);</span><br><span class="line"></span><br><span class="line">mapper.readValue(payload, bean.class);</span><br></pre></td></tr></table></figure>

<p>除了<strong>ALLOW_UNQUOTED_FIELD_NAMES，ALLOW_SINGLE_QUOTES</strong>还有其它的设置，有用到试试。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>flask 统一异常处理以及400 500页面</title>
    <url>/2020/10/28/flask-%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E4%BB%A5%E5%8F%8A400-500%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h3 id="在flask中如何统一处理异常以及400-500页面"><a href="#在flask中如何统一处理异常以及400-500页面" class="headerlink" title="在flask中如何统一处理异常以及400 500页面"></a>在flask中如何统一处理异常以及400 500页面</h3><h4 id="异常类"><a href="#异常类" class="headerlink" title="异常类"></a>异常类</h4><a id="more"></a>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author  : Yang Hao</span></span><br><span class="line"><span class="comment"># File    : exception_common.py</span></span><br><span class="line"><span class="comment"># Software: PyCharm</span></span><br><span class="line"><span class="comment"># Time    : 2020/3/30 17:35</span></span><br><span class="line"><span class="comment"># Description:</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> jsonify, render_template</span><br><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionCommon</span>(<span class="params">Exception</span>):</span></span><br><span class="line">    <span class="comment"># 默认的返回码</span></span><br><span class="line">    status_code = <span class="number">400</span></span><br><span class="line">    <span class="comment"># 可以自己定义return_code</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, message=<span class="literal">None</span>, status_code=<span class="literal">None</span>, payload=<span class="literal">None</span></span>):</span></span><br><span class="line">        Exception.__init__(self)</span><br><span class="line">        self.message = message</span><br><span class="line">        <span class="keyword">if</span> status_code <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.status_code = status_code</span><br><span class="line">        self.payload = payload</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构造要返回的错误代码和错误信息的 dict</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_dict</span>(<span class="params">self</span>):</span></span><br><span class="line">        rv = <span class="built_in">dict</span>(self.payload <span class="keyword">or</span> ())</span><br><span class="line">        rv[<span class="string">&#x27;status_code&#x27;</span>] = self.status_code</span><br><span class="line">        rv[<span class="string">&#x27;message&#x27;</span>] = self.message</span><br><span class="line">        <span class="keyword">return</span> rv</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(ExceptionCommon)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_invalid_usage</span>(<span class="params">error</span>):</span></span><br><span class="line">    response = jsonify(error.to_dict())</span><br><span class="line">    response.status_code = error.status_code</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(500)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_500</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;500.html&#x27;</span>), <span class="number">404</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">e</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;404.html&#x27;</span>), <span class="number">404</span></span><br></pre></td></tr></table></figure>

<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@auth.route(&#x27;/logout&#x27;, methods=(&#x27;GET&#x27;, &#x27;POST&#x27;))</span></span><br><span class="line"><span class="meta">@login_required</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">logout</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    注销登录,解除会话 logout_user()</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    xxx</span><br><span class="line">    <span class="keyword">raise</span> ExceptionCommon(<span class="string">&quot;错误原因&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&quot;auth.login&quot;</span>))</span><br></pre></td></tr></table></figure>


<h4 id="在整个web项目中使用"><a href="#在整个web项目中使用" class="headerlink" title="在整个web项目中使用"></a>在整个web项目中使用</h4><p>上述<code>@app.errorhandler</code>        这个errorhandler处理器注册在app上，只能对app使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(ExceptionCommon)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_invalid_usage</span>(<span class="params">error</span>):</span></span><br><span class="line">    response = jsonify(error.to_dict())</span><br><span class="line">    response.status_code = error.status_code</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<p>修改为以下内容<code>@comm.app_errorhandler</code>需要注册comm的蓝本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@comm.app_errorhandler(ExceptionCommon)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_invalid_usage</span>(<span class="params">error</span>):</span></span><br><span class="line">    response = jsonify(error.to_dict())</span><br><span class="line">    response.status_code = error.status_code</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Flask</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu server 如何升级内核</title>
    <url>/2020/10/28/Ubuntu-server-%E5%A6%82%E4%BD%95%E5%8D%87%E7%BA%A7%E5%86%85%E6%A0%B8/</url>
    <content><![CDATA[<h3 id="查看目前内核"><a href="#查看目前内核" class="headerlink" title="查看目前内核"></a>查看目前内核</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# uname -sr</span><br><span class="line">Linux 4.4.0-142-generic</span><br></pre></td></tr></table></figure>
<h3 id="开始升级内核"><a href="#开始升级内核" class="headerlink" title="开始升级内核"></a>开始升级内核</h3> <a id="more"></a>

<p><a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/">官网镜像</a><br>选择所需要的版本下载(<em>命令下载很慢，建议直接复制连接到浏览器中直接下载</em>);随便找个目录下载下列文件 </p>
<p><strong>64位版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.10.1&#x2F;linux-headers-4.10.1-041001_4.10.1-041001.201702260735_all.deb </span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.10.1&#x2F;linux-headers-4.10.1-041001-generic_4.10.1-041001.201702260735_amd64.deb </span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.10.1&#x2F;linux-image-4.10.1-041001-generic_4.10.1-041001.201702260735_amd64.deb </span><br></pre></td></tr></table></figure>

<p><strong>32位版本</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.10.1&#x2F;linux-headers-4.10.1-041001_4.10.1-041001.201702260735_all.deb </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.10.1&#x2F;linux-headers-4.10.1-041001-generic_4.10.1-041001.201702260735_i386.deb </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget http:&#x2F;&#x2F;kernel.ubuntu.com&#x2F;~kernel-ppa&#x2F;mainline&#x2F;v4.10.1&#x2F;linux-image-4.10.1-041001-generic_4.10.1-041001.201702260735_i386.deb</span><br></pre></td></tr></table></figure>
<h3 id="开始解压安装"><a href="#开始解压安装" class="headerlink" title="开始解压安装"></a>开始解压安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo dpkg -i *.deb</span><br></pre></td></tr></table></figure>

<p>如下图</p>
<p><img src="https://res.cloudinary.com/dkptw3xiz/image/upload/v1603874217/ubuntu-server_hyrt7u.png"></p>
<p>安装完成后，重启服务器并验证是否更新新的内核</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# uname -sr</span><br><span class="line">Linux 4.10.1-041001-generic</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Ubuntu</category>
      </categories>
  </entry>
  <entry>
    <title>flask登陆之后跳转回原先的页面</title>
    <url>/2020/10/28/flask%E7%99%BB%E9%99%86%E4%B9%8B%E5%90%8E%E8%B7%B3%E8%BD%AC%E5%9B%9E%E5%8E%9F%E5%85%88%E7%9A%84%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<p>在使用Flask_login，使用装饰器@login_required时，如果没有登录，会跳转登录页面登陆之后不会返回原来的页面</p>
<a id="more"></a>
<ul>
<li><p>在登录函数中，redirect更换以下代码</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">next_page_url = request.args.get(<span class="string">&#x27;next&#x27;</span>)</span><br><span class="line"> <span class="comment"># 如果 next_page_url 为空，直接返回首页</span></span><br><span class="line"> <span class="keyword">if</span> <span class="keyword">not</span> next_page_url <span class="keyword">or</span> url_parse(next_page_url).netloc != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">     <span class="keyword">return</span> redirect(next_page_url(<span class="string">&#x27;首页&#x27;</span>))</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">     <span class="keyword">return</span> redirect(next_page_url)</span><br></pre></td></tr></table></figure>
</li>
<li><p>html中也需要修改，在url_for中增加<code>next=request.args.next</code></p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;form <span class="string">&quot; method=&quot;</span>POST<span class="string">&quot; action=&quot;</span>&#123;&#123;url_for(<span class="string">&#x27;auth.login&#x27;</span>,<span class="built_in">next</span>=request.args.<span class="built_in">next</span>)&#125;&#125;<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Flask</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>lambda表达式对对象集合进行分组并求和</title>
    <url>/2020/12/14/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%88%86%E7%BB%84%E5%B9%B6%E6%B1%82%E5%92%8C-md/</url>
    <content><![CDATA[<p>最近业务需求，要求对集合按照多个属性分组，并且对某一个属性求和，利用lambda表达式进行分组求和；示例如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">list.parallelStream()</span><br><span class="line">            .collect(Collectors.groupingBy(o -&gt; (o.getName() + o.getAge()), Collectors.toList()))</span><br><span class="line">            .forEach((id, transfer) -&gt; transfer.stream().reduce((a, b) -&gt; new StudentDemo(a.getName(), a.getAge(), a.getScore() + b.getScore())).ifPresent(studentDemoList::add));</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.yang.springboot.lamda.groupBy;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author Yang Hao</span><br><span class="line"> * @date 2020-11-19 19:41</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Demo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;**</span><br><span class="line">         * lambda表达式: 根据姓名和年龄分组之后再求和总分</span><br><span class="line">         *</span><br><span class="line">         * [                                                           [</span><br><span class="line">         *      StudentDemo(name&#x3D;张三, age&#x3D;20, score&#x3D;12),                 StudentDemo(name&#x3D;张三, age&#x3D;20, score&#x3D;92),</span><br><span class="line">         *      StudentDemo(name&#x3D;张三, age&#x3D;20, score&#x3D;80),    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;   StudentDemo(name&#x3D;王五, age&#x3D;20, score&#x3D;33),</span><br><span class="line">         *      StudentDemo(name&#x3D;王五, age&#x3D;20, score&#x3D;33),    &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;   StudentDemo(name&#x3D;李四, age&#x3D;29, score&#x3D;90),</span><br><span class="line">         *      StudentDemo(name&#x3D;李四, age&#x3D;18, score&#x3D;50),                 StudentDemo(name&#x3D;李四, age&#x3D;18, score&#x3D;50)</span><br><span class="line">         *      StudentDemo(name&#x3D;李四, age&#x3D;29, score&#x3D;90)                ]</span><br><span class="line">         * ]</span><br><span class="line">         *&#x2F;</span><br><span class="line"></span><br><span class="line">        List&lt;StudentDemo&gt; list &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(new StudentDemo(&quot;张三&quot;, &quot;20&quot;, 12));</span><br><span class="line">        list.add(new StudentDemo(&quot;张三&quot;, &quot;20&quot;, 80));</span><br><span class="line">        list.add(new StudentDemo(&quot;王五&quot;, &quot;20&quot;, 33));</span><br><span class="line">        list.add(new StudentDemo(&quot;李四&quot;, &quot;18&quot;, 50));</span><br><span class="line">        list.add(new StudentDemo(&quot;李四&quot;, &quot;29&quot;, 90));</span><br><span class="line">        System.out.println(&quot;分组求和之前 &quot; + list);</span><br><span class="line"></span><br><span class="line">        List&lt;StudentDemo&gt; studentDemoList &#x3D; new ArrayList&lt;&gt;();</span><br><span class="line">        list.parallelStream()</span><br><span class="line">                .collect(Collectors.groupingBy(o -&gt; (o.getName() + o.getAge()), Collectors.toList()))</span><br><span class="line">                .forEach((id, transfer) -&gt; transfer.stream().reduce((a, b) -&gt; new StudentDemo(a.getName(), a.getAge(), a.getScore() + b.getScore())).ifPresent(studentDemoList::add));</span><br><span class="line">        System.out.println(&quot;分组求和之后 &quot; + studentDemoList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>macOS brew安装mongo遇见的一些坑和报错</title>
    <url>/2020/10/28/macOS-brew%E5%AE%89%E8%A3%85mongo%E9%81%87%E8%A7%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91%E5%92%8C%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h3 id="brew-安装mongo"><a href="#brew-安装mongo" class="headerlink" title="brew 安装mongo"></a>brew 安装mongo</h3><ul>
<li><p>brew 安装mongo 遇见的一些坑和报错</p>
<p>  <strong>1. WiredTiger  Permission denied</strong></p>
<p>  <strong>2. Found an invalid featureCompatibilityVersion document</strong></p>
<p>   <strong>3. Data directory /data/db not found., terminating</strong></p>
</li>
</ul>
<a id="more"></a>
<ul>
<li>从2019年9月2日开始 ，HomeBrew 也从核心仓库 (<a href="https://github.com/Homebrew/homebrew-core/pull/43770">#43770</a>) 当中移除了mongodb 模块 ，MongoDB 已经宣布不再开源;</li>
<li>若果想继续使用 <code>brew install mongodb</code>，MongoDB 官方提供了一个单独的 HomeBrew 的社区版本安装：<a href="https://github.com/mongodb/homebrew-brew">https://github.com/mongodb/homebrew-brew</a></li>
</ul>
<h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><ul>
<li><p><code>brew tap mongodb/brew</code><br>很遗憾brew tap 的源无法加速，是从 mongodb.org 官方下载的安装包，等待一会吧</p>
</li>
<li><p><code>brew install mongodb-community@4.2</code></p>
</li>
<li><p><code>brew tap mongodb/brew</code></p>
</li>
<li><p><code>配置文件：/usr/local/etc/mongod.conf</code></p>
</li>
<li><p><code>日志目录路径：/usr/local/var/log/mongodb</code></p>
</li>
<li><p><code>数据目录路径：/usr/local/var/mongodb</code></p>
</li>
</ul>
<h3 id="启动mongo"><a href="#启动mongo" class="headerlink" title="启动mongo"></a>启动mongo</h3><ul>
<li><p><code>brew services start mongodb-community@4.2</code></p>
</li>
<li><p><code>brew services stop mongodb-community@4.2</code></p>
</li>
<li><p><code>brew services restart mongodb-community@4.2</code></p>
</li>
</ul>
<h3 id="报错-1"><a href="#报错-1" class="headerlink" title="报错 1"></a>报错 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wiredtiger_open: __posix_open_file, 667: &#x2F;usr&#x2F;local&#x2F;var&#x2F;mongodb&#x2F;WiredTiger.turtle: handle-open: open: Permission denied</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2020-04-13T14:20:17.647+0800 I  STORAGE  [initandlisten] Detected data files <span class="keyword">in</span> /usr/<span class="built_in">local</span>/var/mongodb created by the <span class="string">&#x27;wiredTiger&#x27;</span> storage engine, so setting the active storage engine to <span class="string">&#x27;wiredTiger&#x27;</span>.</span><br><span class="line">2020-04-13T14:20:17.647+0800 I  STORAGE  [initandlisten] wiredtiger_open config: create,cache_size=7680M,cache_overflow=(file_max=0M),session_max=33000,eviction=(threads_min=4,threads_max=4),config_base=<span class="literal">false</span>,statistics=(fast),<span class="built_in">log</span>=(enabled=<span class="literal">true</span>,archive=<span class="literal">true</span>,path=journal,compressor=snappy),file_manager=(close_idle_time=100000,close_scan_interval=10,close_handle_minimum=250),statistics_log=(<span class="built_in">wait</span>=0),verbose=[recovery_progress,checkpoint_progress],</span><br><span class="line">2020-04-13T14:20:18.200+0800 E  STORAGE  [initandlisten] WiredTiger error (13) [1586758818:200112][27741:0x109869dc0], wiredtiger_open: __posix_open_file, 667: /usr/<span class="built_in">local</span>/var/mongodb/WiredTiger.turtle: handle-open: open: Permission denied Raw: [1586758818:200112][27741:0x109869dc0], wiredtiger_open: __posix_open_file, 667: /usr/<span class="built_in">local</span>/var/mongodb/WiredTiger.turtle: handle-open: open: Permission denied</span><br><span class="line">2020-04-13T14:20:18.200+0800 E  STORAGE  [initandlisten] WiredTiger error (13) [1586758818:200395][27741:0x109869dc0], wiredtiger_open: __posix_open_file, 667: /usr/<span class="built_in">local</span>/var/mongodb/WiredTiger.turtle: handle-open: open: Permission denied Raw: [1586758818:200395][27741:0x109869dc0], wiredtiger_open: __posix_open_file, 667: /usr/<span class="built_in">local</span>/var/mongodb/WiredTiger.turtle: handle-open: open: Permission denied</span><br><span class="line">2020-04-13T14:20:18.200+0800 E  STORAGE  [initandlisten] WiredTiger error (13) [1586758818:200599][27741:0x109869dc0], wiredtiger_open: __posix_open_file, 667: /usr/<span class="built_in">local</span>/var/mongodb/WiredTiger.turtle: handle-open: open: Permission denied Raw: [1586758818:200599][27741:0x109869dc0], wiredtiger_open: __posix_open_file, 667: /usr/<span class="built_in">local</span>/var/mongodb/WiredTiger.turtle: handle-open: open: Permission denied</span><br><span class="line">2020-04-13T14:20:18.200+0800 W  STORAGE  [initandlisten] Failed to start up WiredTiger under any compatibility version.</span><br><span class="line">2020-04-13T14:20:18.200+0800 F  STORAGE  [initandlisten] Reason: 13: Permission denied</span><br><span class="line">2020-04-13T14:20:18.200+0800 F  -        [initandlisten] Fatal Assertion 28595 at src/mongo/db/storage/wiredtiger/wiredtiger_kv_engine.cpp 860</span><br><span class="line">2020-04-13T14:20:18.200+0800 F  -        [initandlisten]</span><br><span class="line">	</span><br><span class="line">    ***aborting after fassert() failure</span><br></pre></td></tr></table></figure>


<p>将数据目录路径<code>/usr/local/var/mongodb</code>目录赋值权限777<code>sudo chmod -R 777 /usr/local/var/mongodb</code></p>
<p>  <img src="https://img-blog.csdnimg.cn/20200413155504590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdoYW85MzcxNzA=,size_16,color_FFFFFF,t_70" alt="ddd"></p>
<h3 id="报错-2"><a href="#报错-2" class="headerlink" title="报错 2"></a>报错 2</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Found an invalid featureCompatibilityVersion document   If the current featureCompatibilityVersion is below 4.0, see the documentation on upgrading at http:&#x2F;&#x2F;dochub.mongodb.org&#x2F;core&#x2F;4.0-upgrade-fcv.</span><br></pre></td></tr></table></figure>


<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2020-04-13T15:16:24.375+0800 F  CONTROL  [initandlisten] ** IMPORTANT: UPGRADE PROBLEM: Found an invalid featureCompatibilityVersion document (ERROR: BadValue: Invalid value <span class="keyword">for</span> version, found 3.6, expected <span class="string">&#x27;4.2&#x27;</span> or <span class="string">&#x27;4.0&#x27;</span>. Contents of featureCompatibilityVersion document <span class="keyword">in</span> admin.system.version: &#123; _id: <span class="string">&quot;featureCompatibilityVersion&quot;</span>, version: <span class="string">&quot;3.6&quot;</span> &#125;. See http://dochub.mongodb.org/core/4.0-feature-compatibility.). If the current featureCompatibilityVersion is below 4.0, see the documentation on upgrading at http://dochub.mongodb.org/core/4.0-upgrade-fcv.</span><br><span class="line">2020-04-13T15:16:24.375+0800 I  NETWORK  [initandlisten] shutdown: going to close listening sockets...</span><br></pre></td></tr></table></figure>


<p><img src="https://img-blog.csdnimg.cn/20200413160717917.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lhbmdoYW85MzcxNzA=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><strong>只需将数据目录路径<code>/usr/local/var/mongodb</code>里面内容清空在重新启动mongo即可</strong></p>
<h3 id="其他错误"><a href="#其他错误" class="headerlink" title="其他错误"></a>其他错误</h3><ol>
<li><p>以mongod 启动，报错<code>/data/db</code>文件夹不存在</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">2020-04-13T15:16:24.375+0800 F STORAGE  [initandlisten] exception <span class="keyword">in</span> initAndListen: 29 Data directory /data/db not found., terminating</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 原因是：macOS 10.15版本不能创建<code>/data/db</code></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /data/db</span><br><span class="line">mkdir: /data/db: Read-only file system</span><br></pre></td></tr></table></figure></li>
<li><p>可以mongod指定数据目录启动<code>mongod --dbpath &#39;/Users/neo/data/db&#39;</code></p>
</li>
<li><p>可以编辑配置文件<code>vim ~/.zshrc</code><br>在末尾添加以下内容，以后使用mongod启动</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> mongod=<span class="string">&quot;mongod --dbpath &#x27;/Users/neo/data/db&#x27;&quot;</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql 5.7 返回json数据 中文乱码问题</title>
    <url>/2020/10/28/mysql-5-7-%E8%BF%94%E5%9B%9Ejson%E6%95%B0%E6%8D%AE-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>mysql版本为5.7，通过navicat查看json格式的数据是正常显示，但是查询出来是乱码， 读取其他字段都是正常的，也没有特殊设置json格式的字符集</p>
<a id="more"></a>
<p>mysql驱动jdbc是这个版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">	&lt;version&gt;5.1.36&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>

<p>查资料才发现要jdbc 5.1.40以上，<br>更新依赖解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;5.1.40&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot websocket 注入bean失败</title>
    <url>/2020/10/28/springboot-websocket-%E6%B3%A8%E5%85%A5bean%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p>踩坑记录</p>
<a id="more"></a>
<p>第一种方式：将messageService 注入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ServerEndpoint(value &#x3D; &quot;&#x2F;websocket&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class WebSocketServer &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;这里使用静态，让 service 属于类</span><br><span class="line">    public static MessageServiceImpl messageService;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 给类的service 注入</span><br><span class="line">     * spring管理的都是单例（singleton）和 websocket （多对象）相冲突</span><br><span class="line">     *</span><br><span class="line">     * @param messageService</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Autowired</span><br><span class="line">    public void setMessageService(MessageServiceImpl messageService) &#123;</span><br><span class="line">        WebSocketServer.messageService &#x3D; messageService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二种方式<br>或者将</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">    public void setMessageService(MessageServiceImpl messageService) &#123;</span><br><span class="line">        WebSocketServer.messageService &#x3D; messageService;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>写在<strong>websocketConfig</strong>中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebSocketConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public ServerEndpointExporter serverEndpointExporter() &#123;</span><br><span class="line">        return new ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     *手动注入一个全局变量</span><br><span class="line">     * @param messageService</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Autowired</span><br><span class="line">    public void setMessageService(MessageServiceImpl messageService) &#123;</span><br><span class="line">        WebSocketServer.messageService &#x3D; messageService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu 16.04  pptp搭建服务端和客户端</title>
    <url>/2020/10/28/ubuntu-16-04-pptp%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<p>本文主要是记录ubuntu 16.04安装pptp 服务端以及客户端的过程</p>
<a id="more"></a>
<h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><h3 id="安装pptp"><a href="#安装pptp" class="headerlink" title="安装pptp"></a>安装pptp</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install pptpd</span><br></pre></td></tr></table></figure>

<h3 id="修改pptpd-conf中的配置信息"><a href="#修改pptpd-conf中的配置信息" class="headerlink" title="修改pptpd.conf中的配置信息"></a>修改pptpd.conf中的配置信息</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/pptpd.conf</span><br></pre></td></tr></table></figure>

<p>在末尾增加下面两行，或者打开的内容里面找到这两行，取消掉注释</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">localip  <span class="number">192.168</span>.<span class="number">0.1</span></span><br><span class="line">remoteip <span class="number">192.168</span>.<span class="number">0.234</span><span class="literal">-238</span>,<span class="number">192.168</span>.<span class="number">0.245</span></span><br></pre></td></tr></table></figure>

<p>分别为创建pptp时的主机ip和连接pptp的其他主机使用的ip段，可以自行修改。<br>注意，这里的ip并不是指外网ip或者当前局域网ip，而是指创建（虚拟专用网络）会分配的ip地址。一般这个可以不用修改。</p>
<h3 id="修改chap-secrets配置"><a href="#修改chap-secrets配置" class="headerlink" title="修改chap-secrets配置"></a>修改chap-secrets配置</h3><p>连接pptp 所需要的账号和密码，修改配置文件<code>/etc/ppp/chap-secrets</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/chap<span class="literal">-secrets</span></span><br></pre></td></tr></table></figure>
<p>在末尾添加以下内容</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用户名 pptpd 密码 *</span></span><br><span class="line">neo  pptpd  <span class="number">123456</span>  *</span><br></pre></td></tr></table></figure>

<p>末尾的<em>表示可以使用任意IP连入，如果你要设置指定IP才能连接，可以将</em>替换成对应的IP。支持添加多个账号。</p>
<h3 id="设置ms-dns"><a href="#设置ms-dns" class="headerlink" title="设置ms-dns"></a>设置ms-dns</h3><p>配置使用的dns，修改配置文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/ppp/pptpd<span class="literal">-options</span></span><br></pre></td></tr></table></figure>
<p>在末尾增加下面两行，或者打开的内容里面找到这两行，取消掉注释</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是谷歌的DNS 可以根据实际填写</span></span><br><span class="line">ms<span class="literal">-dns</span> <span class="number">8.8</span>.<span class="number">8.8</span></span><br><span class="line">ms<span class="literal">-dns</span> <span class="number">8.8</span>.<span class="number">4.4</span></span><br></pre></td></tr></table></figure>

<h3 id="开启转发"><a href="#开启转发" class="headerlink" title="开启转发"></a>开启转发</h3><p>修改配置文件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure>

<p>在末尾增加下面内容，或者打开的内容里面找到这一行，取消掉注释</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">net.ipv4.ip_forward=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>保存之后执行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo sysctl <span class="literal">-p</span></span><br></pre></td></tr></table></figure>

<h3 id="配置iptables"><a href="#配置iptables" class="headerlink" title="配置iptables"></a>配置iptables</h3><p>若未安装iptables 执行脚本安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install iptables</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>tips：若之前安装pptp失败的。执行以下脚本；如果是第一次安装可忽略以下内容（目的为了清除iptables里旧的规则）</strong></p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. sudo iptables <span class="operator">-F</span></span><br><span class="line"><span class="number">2</span>. sudo iptables <span class="literal">-X</span></span><br><span class="line"><span class="number">3</span>. sudo iptables <span class="literal">-t</span> nat <span class="operator">-F</span></span><br><span class="line"><span class="number">4</span>. sudo iptables <span class="literal">-t</span> nat <span class="literal">-X</span></span><br></pre></td></tr></table></figure>

<p>然后，允许GRE协议以及1723端口、47端口：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo iptables <span class="literal">-A</span> INPUT <span class="literal">-p</span> gre <span class="literal">-j</span> ACCEPT </span><br><span class="line">sudo iptables <span class="literal">-A</span> INPUT <span class="literal">-p</span> tcp -<span class="literal">-dport</span> <span class="number">1723</span> <span class="literal">-j</span> ACCEPT </span><br><span class="line">sudo iptables <span class="literal">-A</span> INPUT <span class="literal">-p</span> tcp -<span class="literal">-dport</span> <span class="number">47</span> <span class="literal">-j</span> ACCEPT</span><br></pre></td></tr></table></figure>

<p>下一步，开启NAT转发：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo iptables <span class="literal">-t</span> nat <span class="literal">-A</span> POSTROUTING <span class="literal">-s</span> <span class="number">192.168</span>.<span class="number">0.0</span>/<span class="number">24</span> <span class="literal">-o</span> eno33 <span class="literal">-j</span> MASQUERADE</span><br></pre></td></tr></table></figure>

<p>注意，上面的<code>eno33</code>是连接网络的网卡的名称，不同机器这个可能是不一样的。可以在终端输入ifconfig来查看。例如</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">neo@ubuntu:~<span class="variable">$</span> ifconfig</span><br><span class="line">ens33     Link encap:Ethernet  HWaddr <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:<span class="number">37</span>:<span class="number">79</span>:<span class="number">85</span>  </span><br><span class="line">          inet addr:xxx.xxx.xxx.xxx  Bcast:xxx.xxx.xxx.xxx  Mask:<span class="number">255.255</span>.<span class="number">255.0</span></span><br><span class="line">          inet6 addr: xxxx::<span class="number">20</span>c:<span class="number">29</span>ff:fe37:xxxx/<span class="number">64</span> Scope:Link</span><br><span class="line">          UP BROADCAST RUNNING MULTICAST  MTU:<span class="number">1500</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">293</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">211</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1000</span> </span><br><span class="line">          RX bytes:<span class="number">26801</span> (<span class="number">26.8</span> KB)  TX bytes:<span class="number">41763</span> (<span class="number">41.7</span> KB)</span><br><span class="line"></span><br><span class="line">lo        Link encap:Local Loopback  </span><br><span class="line">          inet addr:<span class="number">127.0</span>.<span class="number">0.1</span>  Mask:<span class="number">255.0</span>.<span class="number">0.0</span></span><br><span class="line">          inet6 addr: ::<span class="number">1</span>/<span class="number">128</span> Scope:Host</span><br><span class="line">          UP LOOPBACK RUNNING  MTU:<span class="number">65536</span>  Metric:<span class="number">1</span></span><br><span class="line">          RX packets:<span class="number">160</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> frame:<span class="number">0</span></span><br><span class="line">          TX packets:<span class="number">160</span> errors:<span class="number">0</span> dropped:<span class="number">0</span> overruns:<span class="number">0</span> carrier:<span class="number">0</span></span><br><span class="line">          collisions:<span class="number">0</span> txqueuelen:<span class="number">1</span> </span><br><span class="line">          RX bytes:<span class="number">11840</span> (<span class="number">11.8</span> KB)  TX bytes:<span class="number">11840</span> (<span class="number">11.8</span> KB)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="重启pptp服务"><a href="#重启pptp服务" class="headerlink" title="重启pptp服务"></a>重启pptp服务</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo service pptpd restart</span><br></pre></td></tr></table></figure>


<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2><p>在另一个服务器（本文是用的是两个虚拟机）中执行以下内容</p>
<h3 id="安装pptp客户端"><a href="#安装pptp客户端" class="headerlink" title="安装pptp客户端"></a>安装pptp客户端</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install pptp<span class="literal">-linux</span></span><br></pre></td></tr></table></figure>

<h3 id="初始化一个连接通道：mypptp"><a href="#初始化一个连接通道：mypptp" class="headerlink" title="初始化一个连接通道：mypptp"></a>初始化一个连接通道：mypptp</h3><p>使用服务端设置的账号密码<code>neo/6yhn^YHN</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">sudo pptpsetup -<span class="literal">-create</span> mypptp -<span class="literal">-server</span> xxx.xxx.xxx.xxx -<span class="literal">-username</span> neo -<span class="literal">-password</span> <span class="number">6</span>yhn^YHN -<span class="literal">-encrypt</span> -<span class="literal">-start</span></span><br></pre></td></tr></table></figure>

<p><strong>xxx.xxx.xxx.xxx</strong> 是pptp mypptp服务端的ip地址 根据实际情况填写<br>（以下示例）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~# sudo pptpsetup --create mypptp --server 172.31.1.112 --username neo --password 6yhn^YHN --encrypt --start</span><br><span class="line">Using interface ppp0</span><br><span class="line">Connect: ppp0 &lt;--&gt; &#x2F;dev&#x2F;pts&#x2F;2</span><br><span class="line"></span><br><span class="line">CHAP authentication succeeded</span><br><span class="line">MPPE 128-bit stateless compression enabled</span><br><span class="line">local  IP address 192.168.0.234</span><br><span class="line">remote IP address 192.168.0.1</span><br><span class="line">root@ubuntu:~# </span><br></pre></td></tr></table></figure>


<h3 id="查看连接是否成功"><a href="#查看连接是否成功" class="headerlink" title="查看连接是否成功"></a>查看连接是否成功</h3><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~<span class="comment"># ip addr show</span></span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">1</span></span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::<span class="number">1</span>/<span class="number">128</span> scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc pfifo_fast state UP <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">00</span>:<span class="number">0</span>c:<span class="number">29</span>:xx:<span class="number">86</span>:<span class="number">5</span>f brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet .<span class="number">31.1</span>.<span class="number">113</span>/<span class="number">24</span> brd xxx.<span class="number">31.1</span>.<span class="number">2</span>xxx5 scope global ens33</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fxx0::<span class="number">20</span>c:<span class="number">29</span>ff:fxx3e:<span class="number">8</span>xxf/<span class="number">64</span> scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">8</span>: ppp0: &lt;POINTOPOINT,MULTICAST,NOARP,UP,LOWER_UP&gt; mtu <span class="number">1496</span> qdisc pfifo_fast state UNKNOWN <span class="built_in">group</span> default qlen <span class="number">3</span></span><br><span class="line">    link/ppp </span><br><span class="line">    inet <span class="number">192.168</span>.<span class="number">0.234</span> peer <span class="number">192.168</span>.<span class="number">0.1</span>/<span class="number">32</span> scope global ppp0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">root@ubuntu:~<span class="comment"># </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>也可以在pptp  服务端查看</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">neo@ubuntu:~<span class="variable">$</span> route <span class="literal">-n</span></span><br><span class="line">Kernel IP routing table</span><br><span class="line">Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</span><br><span class="line"><span class="number">0.0</span>.<span class="number">0.0</span>         xxx.xxx.<span class="number">1.1</span>      <span class="number">0.0</span>.<span class="number">0.0</span>         UG    <span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span> ens33</span><br><span class="line">xxx.xxx.<span class="number">1.0</span>      <span class="number">0.0</span>.<span class="number">0.0</span>         <span class="number">255.255</span>.<span class="number">255.0</span>   U     <span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span> ens33</span><br><span class="line"><span class="number">192.168</span>.<span class="number">0.234</span>   <span class="number">0.0</span>.<span class="number">0.0</span>         <span class="number">255.255</span>.<span class="number">255.255</span> UH    <span class="number">0</span>      <span class="number">0</span>        <span class="number">0</span> ppp0</span><br><span class="line">neo@ubuntu:~<span class="variable">$</span> </span><br></pre></td></tr></table></figure>

<h3 id="断开重启pptp客户端"><a href="#断开重启pptp客户端" class="headerlink" title="断开重启pptp客户端"></a>断开重启pptp客户端</h3><p>断开连接</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">poff mypptp</span><br></pre></td></tr></table></figure>
<p> 重接mypptp</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pon mypptp</span><br></pre></td></tr></table></figure>

<h3 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h3><p>LCP: timeout sending Config-Requests</p>
<p>执行：<code>sudo modprobe nf_conntrack_pptp</code></p>
]]></content>
      <categories>
        <category>PPTP</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>PPTP</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 自动装配原理</title>
    <url>/2021/04/25/SpringBoot-%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>使用过 <code>Spring</code> 的小伙伴，一定有被 XML 配置统治的恐惧。即使 Spring 后面引入了基于注解的配置，我们在开启某些 <code>Spring</code> 特性或者引入第三方依赖的时候，还是需要用 XML 或 Java 进行显式配置。</p>
<p>举个例子。没有 <code>Spring Boot</code> 的时候，我们写一个 <code>RestFul Web</code> 服务，还首先需要进行如下配置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RESTConfiguration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">jsonTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MappingJackson2JsonView view = <span class="keyword">new</span> MappingJackson2JsonView();</span><br><span class="line">        view.setPrettyPrint(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewResolver <span class="title">viewResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BeanNameViewResolver();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p><code>spring-servlet.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context/ http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/mvc/ http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.howtodoinjava.demo&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JSON Support --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.BeanNameViewResolver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;jsonTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.json.MappingJackson2JsonView&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是，<code>Spring Boot</code> 项目，我们只需要添加相关依赖，无需配置，通过启动下面的 <code>main()</code> 方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>并且，我们通过 <code>Spring Boot</code> 的全局配置文件 <code>application.properties</code> 或 <code>application.yml</code>即可对项目进行设置比如更换端口号，配置 JPA 属性等等。</p>
<p><strong>为什么 Spring Boot 使用起来这么酸爽呢？</strong> </p>
<p>这得益于其自动装配。</p>
<p><strong>自动装配可以说是 Spring Boot 的核心，那究竟什么是自动装配呢？</strong></p>
<h2 id="什么是-SpringBoot-自动装配？"><a href="#什么是-SpringBoot-自动装配？" class="headerlink" title="什么是 SpringBoot 自动装配？"></a>什么是 SpringBoot 自动装配？</h2><p>我们现在提到自动装配的时候，一般会和 <code>Spring Boot</code> 联系在一起。但是，实际上 <code>Spring Framework</code> 早就实现了这个功能。`Spring Boot 只是在其基础上，通过 SPI 的方式，做了进一步优化。</p>
<blockquote>
<p><code>SpringBoot</code> 定义了一套接口规范，这套规范规定：<code>SpringBoot</code> 在启动时会扫描外部引用 jar 包中的META-INF/spring.factories文件，将文件中配置的类型信息加载到 Spring 容器（此处涉及到 JVM 类加载机制与 Spring 的容器知识），并执行类中定义的各种操作。对于外部 jar 来说，只需要按照 <code>SpringBoot</code> 定义的标准，就能将自己的功能装置进 <code>SpringBoot</code>。</p>
</blockquote>
<p>没有 Spring Boot 的情况下，如果我们需要引入第三方依赖，需要手动配置，非常麻烦。但是，Spring Boot 中，我们直接引入一个 starter 即可。比如你想要在项目中使用 redis 的话，直接在项目中引入对应的 starter 即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引入 starter 之后，我们通过少量注解和一些简单的配置就能使用第三方组件提供的功能了。</p>
<p>在我看来，自动装配可以简单理解为：<strong>通过注解或者一些简单的配置就能在 <code>Spring Boot</code> 的帮助下实现某块功能。</strong></p>
<h2 id="SpringBoot-是如何实现自动装配的？"><a href="#SpringBoot-是如何实现自动装配的？" class="headerlink" title="SpringBoot 是如何实现自动装配的？"></a>SpringBoot 是如何实现自动装配的？</h2><p>我们先看一下 <code>SpringBoot</code> 的核心注解 <code>SpringBootApplication</code> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line">&lt;<span class="number">1.</span>&gt;<span class="meta">@SpringBootConfiguration</span></span><br><span class="line">&lt;<span class="number">2.</span>&gt;<span class="meta">@ComponentScan</span></span><br><span class="line">&lt;<span class="number">3.</span>&gt;<span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@SpringBootConfiguration 注解</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Configuration</span> <span class="comment">//实际上它也是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootConfiguration &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大概可以把 <code>@SpringBootApplication</code>看作是 <code>@Configuration</code>、<code>@EnableAutoConfiguration</code>、<code>@ComponentScan</code> 注解的集合。根据 <code>SpringBoot</code> 官网，这三个注解的作用分别是：</p>
<p><strong><code>@EnableAutoConfiguration</code>：</strong> 启用 <code>SpringBoot</code> 的自动配置机制</p>
<p><strong><code>@Configuration</code>：</strong> 允许在上下文中注册额外的 bean 或导入其他配置类</p>
<p><strong><code>@ComponentScan</code>：</strong> 扫描被<code>@Component (@Service,@Controller)</code>注解的 bean，注解默认会扫描启动类所在的包下所有的类 ，可以自定义不扫描某些 bean。如下图所示，容器中将排除 <code>TypeExcludeFilter</code> 和 <code>AutoConfigurationExcludeFilter</code>。</p>
<p><img src="SpringBootApplication%E6%B3%A8%E8%A7%A3.jpeg" alt="SpringBootApplication注解"></p>
<p><code>@EnableAutoConfiguration</code> 是实现自动装配的重要注解，我们以这个注解入手。</p>
<p><strong><code>@EnableAutoConfiguration</code>: 实现自动装配的核心注解</strong></p>
<p><code>EnableAutoConfiguration</code> 只是一个简单地注解，自动装配核心功能的实现实际是通过 <code>AutoConfigurationImportSelector</code> 类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span> <span class="comment">//作用：将main包下的所欲组件注册到容器中</span></span><br><span class="line"><span class="meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span> <span class="comment">//加载自动装配类 xxxAutoconfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line">    String ENABLED_OVERRIDE_PROPERTY = <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们现在重点分析下 <code>AutoConfigurationImportSelector</code> 类到底做了什么？</p>
<p><strong><code>AutoConfigurationImportSelector</code>: 加载自动装配类</strong></p>
<p><code>AutoConfigurationImportSelector</code>类的继承体系如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoConfigurationImportSelector</span> <span class="keyword">implements</span> <span class="title">DeferredImportSelector</span>, <span class="title">BeanClassLoaderAware</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">BeanFactoryAware</span>, <span class="title">EnvironmentAware</span>, <span class="title">Ordered</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeferredImportSelector</span> <span class="keyword">extends</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    String[] selectImports(AnnotationMetadata var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，<code>AutoConfigurationImportSelector</code> 类实现了 <code>ImportSelector</code> 接口，也就实现了这个接口中的 selectImports方法，<strong>该方法主要用于获取所有符合条件的类的全限定类名，这些类需要被加载到 IoC 容器中。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] NO_IMPORTS = <span class="keyword">new</span> String[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="comment">// &lt;1&gt;.判断自动装配开关是否打开</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">            <span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//&lt;2&gt;.获取所有需要装配的bean</span></span><br><span class="line">            AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader.loadMetadata(<span class="keyword">this</span>.beanClassLoader);</span><br><span class="line">            AutoConfigurationImportSelector.AutoConfigurationEntry autoConfigurationEntry = <span class="keyword">this</span>.getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);</span><br><span class="line">            <span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里我们需要重点关注一下<code>getAutoConfigurationEntry()</code>方法，这个方法主要负责加载自动配置类的。</p>
<p>该方法调用链如下：</p>
<p><img src="getAutoConfigurationEntry%E8%B0%83%E7%94%A8%E9%93%BE.jpeg" alt="getAutoConfigurationEntry调用链"></p>
<p>现在我们结合<code>getAutoConfigurationEntry()</code>的源码来详细分析一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AutoConfigurationEntry EMPTY_ENTRY = <span class="keyword">new</span> AutoConfigurationEntry();</span><br><span class="line"></span><br><span class="line"><span class="function">AutoConfigurationEntry <span class="title">getAutoConfigurationEntry</span><span class="params">(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//&lt;1&gt;.</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isEnabled(annotationMetadata)) &#123;</span><br><span class="line">            <span class="keyword">return</span> EMPTY_ENTRY;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//&lt;2&gt;.</span></span><br><span class="line">            AnnotationAttributes attributes = <span class="keyword">this</span>.getAttributes(annotationMetadata);</span><br><span class="line">            <span class="comment">//&lt;3&gt;.</span></span><br><span class="line">            List&lt;String&gt; configurations = <span class="keyword">this</span>.getCandidateConfigurations(annotationMetadata, attributes);</span><br><span class="line">            <span class="comment">//&lt;4&gt;.</span></span><br><span class="line">            configurations = <span class="keyword">this</span>.removeDuplicates(configurations);</span><br><span class="line">            Set&lt;String&gt; exclusions = <span class="keyword">this</span>.getExclusions(annotationMetadata, attributes);</span><br><span class="line">            <span class="keyword">this</span>.checkExcludedClasses(configurations, exclusions);</span><br><span class="line">            configurations.removeAll(exclusions);</span><br><span class="line">            configurations = <span class="keyword">this</span>.filter(configurations, autoConfigurationMetadata);</span><br><span class="line">            <span class="keyword">this</span>.fireAutoConfigurationImportEvents(configurations, exclusions);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AutoConfigurationImportSelector.AutoConfigurationEntry(configurations, exclusions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><strong>第 1 步:</strong></p>
<p>判断自动装配开关是否打开。默认<code>spring.boot.enableautoconfiguration=true</code>，可在 <code>application.properties</code> 或 <code>application.yml</code> 中设置</p>
<p><img src="%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%BC%80%E5%85%B3.jpeg" alt="自动装配开关"></p>
<p><strong>第 2 步 ：</strong></p>
<p>用于获取<code>EnableAutoConfiguration</code>注解中的 <code>exclude</code> 和 <code>excludeName。</code></p>
<p><img src="EnableAutoConfiguration%E8%8E%B7%E5%8F%96exclude%E5%92%8CexcludeName.jpeg" alt="EnableAutoConfiguration获取exclude和excludeName"></p>
<p><strong>第 3 步</strong></p>
<p>获取需要自动装配的所有配置类，读取<code>META-INF/spring.factories</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring-boot&#x2F;spring-boot-project&#x2F;spring-boot-autoconfigure&#x2F;src&#x2F;main&#x2F;resources&#x2F;META-INF&#x2F;spring.factories</span><br></pre></td></tr></table></figure>

<p><img src="%E8%8E%B7%E5%8F%96%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E7%9A%84%E6%89%80%E6%9C%89%E9%85%8D%E7%BD%AE%E7%B1%BB.jpeg" alt="获取自动装配的所有配置类"></p>
<p>从下图可以看到这个文件的配置内容都被我们读取到了。<code>XXXAutoConfiguration</code>的作用就是按需加载组件。</p>
<p><img src="spring.factories.jpeg" alt="spring.factories.jpeg"></p>
<p>不光是这个依赖下的<code>META-INF/spring.factories</code>被读取到，所有 <code>Spring Boot Starter</code> 下的<code>META-INF/spring.factories</code>都会被读取到。</p>
<p>所以，你可以清楚滴看到， druid 数据库连接池的 <code>Spring Boot Starter</code> 就创建了<code>META-INF/spring.factories</code>文件。</p>
<p>如果，我们自己要创建一个 <code>Spring Boot Starter</code>，这一步是必不可少的。</p>
<p><img src="ceshi.jpeg" alt="ceshi"></p>
<p><strong>第 4 步 ：</strong></p>
<p>到这里可能面试官会问你:“<code>spring.factories</code>中这么多配置，每次启动都要全部加载么？”。</p>
<p>很明显，这是不现实的。我们 debug 到后面你会发现，<code>configurations</code> 的值变小了。</p>
<p><img src="ConditionalOnXXX%E7%AD%9B%E9%80%89.jpeg" alt="ConditionalOnXXX筛选"></p>
<p>因为，这一步有经历了一遍筛选，<code>@ConditionalOnXXX</code> 中的所有条件都满足，该类才会生效。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 检查相关的类：RabbitTemplate 和 Channel是否存在</span></span><br><span class="line"><span class="comment">// 存在才会加载</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; RabbitTemplate.class, Channel.class &#125;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RabbitProperties.class)</span></span><br><span class="line"><span class="meta">@Import(RabbitAnnotationDrivenConfiguration.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitAutoConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有兴趣的童鞋可以详细了解下 Spring Boot 提供的条件注解</p>
<ul>
<li><code>@ConditionalOnBean</code>：当容器里有指定 Bean 的条件下</li>
<li><code>@ConditionalOnMissingBean</code>：当容器里没有指定 Bean 的情况下</li>
<li><code>@ConditionalOnSingleCandidate</code>：当指定 Bean 在容器中只有一个，或者虽然有多个但是指定首选 Bean</li>
<li><code>@ConditionalOnClass</code>：当类路径下有指定类的条件下</li>
<li><code>@ConditionalOnMissingClass</code>：当类路径下没有指定类的条件下</li>
<li><code>@ConditionalOnProperty</code>：指定的属性是否有指定的值</li>
<li><code>@ConditionalOnResource</code>：类路径是否有指定的值</li>
<li><code>@ConditionalOnExpression</code>：基于 SpEL 表达式作为判断条件</li>
<li><code>@ConditionalOnJava</code>：基于 Java 版本作为判断条件</li>
<li><code>@ConditionalOnJndi</code>：在 JNDI 存在的条件下差在指定的位置</li>
<li><code>@ConditionalOnNotWebApplication</code>：当前项目不是 Web 项目的条件下</li>
<li><code>@ConditionalOnWebApplication</code>：当前项目是 Web 项 目的条件下</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong><code>Spring Boot</code> 通过<code>@EnableAutoConfiguration</code>开启自动装配，通过 <code>SpringFactoriesLoader</code> 最终加载<code>META-INF/spring.factories</code>中的自动配置类实现自动装配，自动配置类其实就是通过<code>@Conditional</code>按需加载的配置类，想要其生效必须引入<code>spring-boot-starter-xxx</code>包实现起步依赖</strong></p>
<p>本文转载自 <a href="https://www.cnblogs.com/javaguide/p/springboot-auto-config.html">淘宝一面：“说一下 Spring Boot 自动装配原理呗？”</a></p>
]]></content>
      <categories>
        <category>Java</category>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap源码分析</title>
    <url>/2021/04/26/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="HashMap简介"><a href="#HashMap简介" class="headerlink" title="HashMap简介"></a>HashMap简介</h2><p>JDK1.8 之前 <code>HashMap</code> 由 数组+链表 组成的，数组是 <code>HashMap</code> 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。</p>
<p>JDK1.8 之后 <code>HashMap</code> 的组成多了红黑树，在满足下面两个条件之后，会执行链表转红黑树操作，以此来加快搜索速度。</p>
<ul>
<li>链表长度大于阈值（默认为 8）</li>
<li><code>HashMap</code> 数组长度超过 64</li>
</ul>
<h2 id="HashMap底层数据结构分析"><a href="#HashMap底层数据结构分析" class="headerlink" title="HashMap底层数据结构分析"></a>HashMap底层数据结构分析</h2><h3 id="JDK1-8-之前"><a href="#JDK1-8-之前" class="headerlink" title="JDK1.8 之前"></a>JDK1.8 之前</h3><a id="more"></a>

<p><strong>JDK1.8之前数据结构图</strong></p>
<p><img src="JDK1.8%E4%B9%8B%E5%89%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg" alt="JDK1.8之前数据结构.jpg"></p>
<p>JDK1.8 之前 HashMap 底层是 <strong>数组和链表</strong> 结合在一起使用也就是 <strong>链表散列</strong>。</p>
<p>HashMap 通过 key 的 hashCode 经过扰动函数处理过后得到 hash 值，然后通过 <code>(n - 1) &amp; hash</code> 判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。</p>
<p>所谓扰动函数指的就是 HashMap 的 hash 方法。使用 hash 方法也就是扰动函数是为了防止一些实现比较差的 hashCode() 方法 换句话说使用扰动函数之后可以减少碰撞。</p>
<p><strong>JDK 1.8 HashMap 的 hash 方法源码:</strong></p>
<p>JDK 1.8 的 hash 方法 相比于 JDK 1.7 hash 方法更加简化，但是原理不变。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="comment">// key.hashCode()：返回散列值也就是hashcode</span></span><br><span class="line">    <span class="comment">// ^ ：按位异或</span></span><br><span class="line">    <span class="comment">// &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐</span></span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对比一下 JDK1.7 的 HashMap 的 hash 方法源码.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line"></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比于 JDK1.8 的 hash 方法 ，JDK 1.7 的 hash 方法的性能会稍差一点点，因为毕竟扰动了 4 次。</p>
<p>所谓 <strong>“拉链法”</strong> 就是：将链表和数组相结合。也就是说创建一个链表数组，数组中每一格就是一个链表。若遇到哈希冲突，则将冲突的值加到链表中即可。</p>
<h3 id="JDK1-8-之后"><a href="#JDK1-8-之后" class="headerlink" title="JDK1.8 之后"></a>JDK1.8 之后</h3><p><img src="JDK1.8%E4%B9%8B%E5%90%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt="JDK1.8 之后数据结构图"></p>
<p><strong>HashMap类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 序列号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;</span><br><span class="line">    <span class="comment">// 默认的初始桶容量是16</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 桶最大值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 默认的负载因子（0.75）</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line">    <span class="comment">// 当桶(bucket)上的结点数大于这个值时会转成红黑树</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// 当桶(bucket)上的结点数小于这个值时树转链表</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</span><br><span class="line">    <span class="comment">// 桶中结构转化为红黑树对应的table的最小大小</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</span><br><span class="line">    <span class="comment">// table 真正存放数据的数组，总是2的幂次倍</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;k,v&gt;[] table;</span><br><span class="line">    <span class="comment">// 存放具体元素的集</span></span><br><span class="line">    <span class="keyword">transient</span> Set&lt;map.entry&lt;k,v&gt;&gt; entrySet;</span><br><span class="line">    <span class="comment">// 存放元素的个数，注意这个不等于数组的长度</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">// 每次扩容和更改map结构的计数器</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line">    <span class="comment">// 临界值 当实际大小(容量*填充因子)超过临界值时，会进行扩容,可在初始化时显式指定</span></span><br><span class="line">    <span class="keyword">int</span> threshold;</span><br><span class="line">    <span class="comment">// 负载因子，可在初始化时显式指定</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>loadFactor 加载因子</strong></p>
<p><code>loadFactor</code> 加载因子是控制数组存放数据的疏密程度，<code>loadFactor</code> 越趋近于 1，那么 数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，<code>loadFactor</code> 越小，也就是趋近于 0，数组中存放的数据(entry)也就越少，也就越稀疏。</p>
<p><strong>loadFactor 太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor 的默认值为 0.75f 是官方给出的一个比较好的临界值</strong>。</p>
<p>给定的默认容量为 16，负载因子为 0.75。Map 在使用过程中不断的往里面存放数据，当数量达到了 16 * 0.75 = 12 就需要将当前 16 的容量进行扩容，而扩容这个过程涉及到 rehash、复制数据等操作，所以非常消耗性能。</p>
</li>
<li><p><strong>threshold</strong></p>
<p><strong><code>threshold = capacity \* loadFactor</code>**，</strong>当 <code>Size&gt;=threshold</code><strong>的时候，那么就要考虑对数组的扩增了，也就是说，这个的意思就是 **衡量数组是否需要扩增的一个标准</strong>。</p>
</li>
</ul>
<h2 id="HashMap-源码分析"><a href="#HashMap-源码分析" class="headerlink" title="HashMap 源码分析"></a>HashMap 源码分析</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>HashMap 中有四个构造方法，它们分别如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认构造函数。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all   other fields defaulted</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 包含另一个“Map”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">        putMapEntries(m, <span class="keyword">false</span>);<span class="comment">//下面会分析到这个方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal initial capacity: &quot;</span> + initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Illegal load factor: &quot;</span> + loadFactor);</span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>putMapEntries 方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = m.size();</span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断table是否已经初始化</span></span><br><span class="line">        <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></span><br><span class="line">            <span class="comment">// 未初始化，s为m的实际元素个数</span></span><br><span class="line">            <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">            <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                    (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">            <span class="comment">// 计算得到的t大于阈值，则初始化阈值</span></span><br><span class="line">            <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已初始化，并且m元素个数大于阈值，进行扩容处理</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">// 将m中的所有元素添加至HashMap中</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</span><br><span class="line">            K key = e.getKey();</span><br><span class="line">            V value = e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>源码分析</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
</search>
